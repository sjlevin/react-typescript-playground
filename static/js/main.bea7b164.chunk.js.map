{"version":3,"sources":["initialTodos.ts","TodoListItem.tsx","TodoList.tsx","AddTodoForm.tsx","App.tsx","index.tsx"],"names":["initialTodos","text","complete","TodoListItem","todo","toggleComplete","style","textDecoration","undefined","type","checked","onClick","TodoList","todos","map","key","AddTodoForm","addTodo","useState","newTodo","setNewTodo","value","onChange","e","target","preventDefault","App","setTodos","Fragment","selectedTodo","updatedTodos","trim","ReactDOM","render","document","getElementById"],"mappings":"qMAAaA,EAA4B,CACvC,CACEC,KAAM,eACNC,UAAU,GAEZ,CACED,KAAM,WACNC,UAAU,ICADC,EAAgC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eACpD,OACE,4BACE,2BACEC,MAAO,CAAEC,eAAgBH,EAAKF,SAAW,oBAAiBM,IAE1D,2BACEC,KAAK,WACLC,QAASN,EAAKF,SACdS,QAAS,WACPN,EAAeD,MAGlBA,EAAKH,QCZDW,EAAoC,SAAC,GAG3C,IAFLC,EAEI,EAFJA,MACAR,EACI,EADJA,eAEA,OACE,4BACGQ,EAAMC,KAAI,SAACV,GAAD,OACT,kBAAC,EAAD,CACEW,IAAKX,EAAKH,KACVG,KAAMA,EACNC,eAAgBA,SCZbW,EAA0C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACxCC,mBAAiB,IADuB,mBAC/DC,EAD+D,KACtDC,EADsD,KAatE,OACE,8BACE,2BAAOX,KAAK,OAAOY,MAAOF,EAASG,SAZlB,SAACC,GACpBH,EAAWG,EAAEC,OAAOH,UAYlB,4BAAQZ,KAAK,SAASE,QATL,SAACY,GACpBA,EAAEE,iBACFR,EAAQE,GACRC,EAAW,MAMT,cCSSM,EA1BO,WAAO,IAAD,EACAR,mBAAsBlB,GADtB,mBACnBa,EADmB,KACZc,EADY,KAkB1B,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAUf,MAAOA,EAAOR,eAjBW,SAACwB,GACtC,IAAMC,EAAejB,EAAMC,KAAI,SAACV,GAC9B,OAAIA,IAASyB,EACJ,2BAAKzB,GAAZ,IAAkBF,UAAWE,EAAKF,WAE7BE,KAETuB,EAASG,MAWP,kBAAC,EAAD,CAAab,QARQ,SAACE,GACL,KAAnBA,EAAQY,QACNJ,EAAS,GAAD,mBAAKd,GAAL,CAAY,CAAEZ,KAAMkB,EAASjB,UAAU,WChBrD8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bea7b164.chunk.js","sourcesContent":["export const initialTodos: Array<Todo> = [\n  {\n    text: \"Walk the dog\",\n    complete: true,\n  },\n  {\n    text: \"Make app\",\n    complete: false,\n  },\n];\n","import React from \"react\";\n\ninterface Props {\n  todo: Todo;\n  toggleComplete: ToggleComplete;\n}\n\nexport const TodoListItem: React.FC<Props> = ({ todo, toggleComplete }) => {\n  return (\n    <li>\n      <label\n        style={{ textDecoration: todo.complete ? \"line-through\" : undefined }}\n      >\n        <input\n          type=\"checkbox\"\n          checked={todo.complete}\n          onClick={() => {\n            toggleComplete(todo);\n          }}\n        />\n        {todo.text}\n      </label>\n    </li>\n  );\n};\n","import React from \"react\";\nimport { TodoListItem } from \"./TodoListItem\";\n\ninterface TodoListProps {\n  todos: Array<Todo>;\n  toggleComplete: ToggleComplete;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  toggleComplete,\n}) => {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoListItem\n          key={todo.text}\n          todo={todo}\n          toggleComplete={toggleComplete}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, ChangeEvent, FormEvent } from \"react\";\n\ninterface AddTodoFormProps {\n  addTodo: AddTodo;\n}\n\nexport const AddTodoForm: React.FC<AddTodoFormProps> = ({ addTodo }) => {\n  const [newTodo, setNewTodo] = useState<string>(\"\");\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTodo(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    addTodo(newTodo);\n    setNewTodo(\"\");\n  };\n\n  return (\n    <form>\n      <input type=\"text\" value={newTodo} onChange={handleChange} />\n      <button type=\"submit\" onClick={handleSubmit}>\n        Add Todo\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from \"react\";\nimport { initialTodos } from \"./initialTodos\";\nimport { TodoList } from \"./TodoList\";\nimport { AddTodoForm } from \"./AddTodoForm\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Array<Todo>>(initialTodos);\n\n  const toggleComplete: ToggleComplete = (selectedTodo) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return { ...todo, complete: !todo.complete };\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const addTodo: AddTodo = (newTodo) => {\n    newTodo.trim() !== \"\" &&\n      setTodos([...todos, { text: newTodo, complete: false }]);\n  };\n\n  return (\n    <React.Fragment>\n      <TodoList todos={todos} toggleComplete={toggleComplete} />\n      <AddTodoForm addTodo={addTodo} />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}